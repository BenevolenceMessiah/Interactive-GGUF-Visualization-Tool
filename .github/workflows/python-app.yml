# .github/workflows/python-app.yml

name: Python Application CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      docker_ready: ${{ steps.docker_ready.outputs.docker_ready }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Cache pip
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade --force-reinstall torch==2.2.0 --index-url https://download.pytorch.org/whl/cu121
        pip install -r requirements.txt

    - name: Install llama-cpp-python from prebuilt wheel
      run: |
        pip install llama-cpp-python --extra-index-url https://abetlen.github.io/llama-cpp-python/whl/cu121

    - name: Build Documentation (Optional)
      run: |
        cd docs
        pip install mkdocs
        mkdocs build
        cd ..

    - name: Install Docker CLI
      run: |
        sudo apt-get update
        sudo apt-get install -y docker.io
        sudo systemctl start docker
        sudo systemctl enable docker
        sudo usermod -aG docker $USER
        newgrp docker

    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /var/lib/docker
        key: ${{ runner.os }}-docker-${{ hashFiles('**/Dockerfile') }}
        restore-keys: |
          ${{ runner.os }}-docker-

    - name: Build Docker image
      run: |
        docker build -t gguf-visualization-tool .

    # Output flag to indicate Docker is ready
    - name: Set Docker Ready
      id: docker_ready
      run: echo "::set-output name=docker_ready::true"

  test:
    runs-on: ubuntu-latest
    needs: setup
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Cache pip
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade --force-reinstall torch==2.2.0 --index-url https://download.pytorch.org/whl/cu121
        pip install -r requirements.txt

    - name: Install llama-cpp-python from prebuilt wheel
      run: |
        pip install llama-cpp-python --extra-index-url https://abetlen.github.io/llama-cpp-python/whl/cu121

    - name: Run Unit Tests
      run: |
        python -m unittest discover tests

  notebook_test:
    runs-on: ubuntu-latest
    needs: setup
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Cache pip
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade --force-reinstall torch==2.2.0 --index-url https://download.pytorch.org/whl/cu121
        pip install -r requirements.txt

    - name: Install llama-cpp-python from prebuilt wheel
      run: |
        pip install llama-cpp-python --extra-index-url https://abetlen.github.io/llama-cpp-python/whl/cu121

    - name: Run Jupyter Notebook
      run: |
        pip install nbconvert
        jupyter nbconvert --to notebook --execute interactive_gguf_visualization_tool.ipynb --output test_notebook.ipynb

  docker_test:
    runs-on: ubuntu-latest
    needs: setup
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Check if Docker is ready
      run: |
        if [ "${{ needs.setup.outputs.docker_ready }}" != "true" ]; then
          echo "Docker is not ready"
          exit 1
        fi

    - name: Run Docker Container
      run: |
        # Run the Docker container in detached mode
        docker run --gpus all -d -p 7934:7934 --name gguf_test_container gguf-visualization-tool

    - name: Wait for Docker to initialize
      run: |
        sleep 10

    - name: Check Docker Container
      run: |
        docker ps | grep gguf_test_container

    - name: Perform HTTP request to Gradio server
      run: |
        curl -sSf http://localhost:7934 || exit 1

    - name: Clean up Docker Container
      if: always()
      run: |
        docker stop gguf_test_container || true
        docker rm gguf_test_container || true
